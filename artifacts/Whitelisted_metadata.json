{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_provider",
						"type": "address"
					}
				],
				"name": "deactivateProvider",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_purchaser",
						"type": "address"
					}
				],
				"name": "deleteFromWhitelist",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_provider",
						"type": "address"
					}
				],
				"name": "isProvider",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_purchaser",
						"type": "address"
					}
				],
				"name": "isWhitelisted",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "provider",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_provider",
						"type": "address"
					}
				],
				"name": "setProvider",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "whitelist",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_purchaser",
						"type": "address[]"
					}
				],
				"name": "whitelistAddresses",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"RoninPresale.sol": "Whitelisted"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"Address.sol": {
			"keccak256": "0x8a112c7bf77e40fa0213584a4f991c563614c0235a39aba62580ddc373ef63e6",
			"license": "MIT",
			"urls": [
				"bzz-raw://7cd49fd4ff2dd59ff8cd6951052b76482c17ba2f1baba80c29e101044c0305dc",
				"dweb:/ipfs/QmRCiiRoPovUPjDLnR8HSEnmTq9am2aGCqq1XWq6dphxuk"
			]
		},
		"Context.sol": {
			"keccak256": "0x5ecc9a779906a85b386e122d0e55d00f6202fb036ae2117d274e86cb0933ca47",
			"license": "MIT",
			"urls": [
				"bzz-raw://09b954ad12d5023071d33c35c7bc28b656ceb2756511d08bdfe08162a8c99fa4",
				"dweb:/ipfs/QmUVTbqZJRUAtxX5zkyksN7hnBv6vFeUbQay6P7LVKYH7Q"
			]
		},
		"IERC20.sol": {
			"keccak256": "0x20f268f65ec717330751572aaff733997550dd7af36bb31b7d215cc2ece3327b",
			"license": "MIT",
			"urls": [
				"bzz-raw://5f2dd29319b03df5fbc1044fcb435ff49d04e90bc4e611c877ccdf2c933bf87c",
				"dweb:/ipfs/QmRCDFeH5NFNKwXQkioErQm7gaafomZd7sKmasAZYWo3z6"
			]
		},
		"Ownable.sol": {
			"keccak256": "0x51e7f0d46fa8055560473915b9800a0017ffbf7a2bed62078a6a373055447656",
			"license": "MIT",
			"urls": [
				"bzz-raw://c213638799ba99bd3c1ede01964bde4f81db28287b8420850d6cb08d65dfb104",
				"dweb:/ipfs/QmSAsaRjv1PYnhRJoXDXdTtv41GHyKYeD6mYVmwDY5qGTL"
			]
		},
		"RoninPresale.sol": {
			"keccak256": "0x613d3afe9acf77bef5f8d87c64fa8a22cd845488a7feb389da114fe1b275b6f9",
			"license": "MIT",
			"urls": [
				"bzz-raw://b1c9179b22e9b849d973778011aa0290f4d69359bf0a733bfaaed4d6d9ab0882",
				"dweb:/ipfs/QmTaYB3Cqe1V2vhPBrCLtBATWrrFtAhPEnGCo3UoW6iGLV"
			]
		}
	},
	"version": 1
}